/*
* Evaluates the board after performing a possible move in order to
* determine the best scenario. These evaluations are based on
* values assigned to each cell on the board and depend on
* piece type, piece color and piece position.
*/
#ifndef EVAL_BOARD_H
#define EVAL_BOARD_H

#include <stdio.h>
#include <string>
#include <iostream>
#include <fstream>
#include "Cell.h"

#define PAWN 1
#define ROOK 2
#define KNIGHT 3
#define BISHOP 4
#define QUEEN 5
#define KING 6
#define BOARD_SIZE 8

float get_piece_score(int type, int i, int j, std::string color) {
        float white_pawn[BOARD_SIZE][BOARD_SIZE] = {
        {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
        {0.5, 1.0, 1.0, -2.0, -2.0, 1.0, 1.0, 0.5},
        {0.5, -0.5, -1.0, 0.0, 0.0, -1.0, -0.5, 0.5},
        {0.0, 0.0, 0.0, 2.0, 2.0, 0.0, 0.0, 0.0},
        {0.5, 0.5, 1.0, 2.5, 2.5, 1.0, 0.5, 0.5},
        {1.0, 1.0, 2.0, 3.0, 3.0, 2.0, 1.0, 1.0},
        {5.0, 5.0, 5.0, 5.0, 5.0, 5.0, 5.0, 5.0},
        {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}
    };

    float black_pawn[BOARD_SIZE][BOARD_SIZE] = {
        {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
        {5.0, 5.0, 5.0, 5.0, 5.0, 5.0, 5.0, 5.0},
        {1.0, 1.0, 2.0, 3.0, 3.0, 2.0, 1.0, 1.0},
        {0.5, 0.5, 1.0, 2.5, 2.5, 1.0, 0.5, 0.5},
        {0.0, 0.0, 0.0, 2.0, 2.0, 0.0, 0.0, 0.0},
        {0.5, -0.5, -1.0, 0.0, 0.0, -1.0, -0.5, 0.5},
        {0.5, 1.0, 1.0, -2.0, -2.0, 1.0, 1.0, 0.5},
        {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}
    };

    float white_knight[BOARD_SIZE][BOARD_SIZE] = {
        {-5.0, -4.0, -3.0, -3.0, -3.0, -3.0, -4.0, -5.0},
        {-4.0, -2.0, 0.0, 0.5, 0.5, 0.0, -2.0, -4.0},
        {-3.0, 0.5, 1.0, 1.5, 1.5, 1.0, 0.5, -3.0},
        {-3.0, 0.0, 1.5, 2.0, 2.0, 1.5, 0.0, -3.0},
        {-3.0, 0.5, 1.5, 2.0, 2.0, 1.5, 0.5, -3.0},
        {-3.0, 0.0, 1.0, 1.5, 1.5, 1.0, 0.0, -3.0},
        {-4.0, -2.0, 0.0, 0.0, 0.0, 0.0, -2.0, -4.0},
        {-5.0, -4.0, -3.0, -3.0, -3.0, -3.0, -4.0, -5.0}
    };

    float black_knight[BOARD_SIZE][BOARD_SIZE] = {
        {-5.0, -4.0, -3.0, -3.0, -3.0, -4.0, -5.0},
        {-4.0, -2.0, 0.0, 0.0, 0.0, 0.0, -2.0, -4.0},
        {-3.0, 0.0, 1.0, 1.5, 1.5, 1.0, 0.0, -3.0},
        {-3.0, 0.5, 1.5, 2.0, 2.0, 1.5, 0.5, -3.0},
        {-3.0, 0.0, 1.5, 2.0, 2.0, 1.5, 0.0, -3.0},
        {-3.0, 0.5, 1.0, 1.5, 1.5, 1.0, 0.5, -3.0},
        {-4.0, -2.0, 0.0, 0.5, 0.5, 0.0, -2.0, -4.0},
        {-5.0, -4.0, -3.0, -3.0, -3.0, -4.0, -5.0}
    };

    float white_bishop[BOARD_SIZE][BOARD_SIZE] = {
        {-2.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -2.0},
        {-1.0, 0.5, 0.0, 0.0, 0.0, 0.0, 0.5, -1.0},
        {-1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, -1.0},
        {-1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 0.0, -1.0},
        {-1.0, 0.5, 0.5, 1.0, 1.0, 0.5, 0.5, -1.0},
        {-1.0, 0.0, 0.5, 1.0, 1.0, 0.5, 0.0, -1.0},
        {-1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0},
        {-2.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -2.0}
    };

    float black_bishop[BOARD_SIZE][BOARD_SIZE] = {
        {-2.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -2.0},
        {-1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -1.0},
        {-1.0, 0.0, 0.5, 1.0, 1.0, 0.5, 0.0, -1.0},
        {-1.0, 0.5, 0.5, 1.0, 1.0, 0.5, 0.5, -1.0},
        {-1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 0.0, -1.0},
        {-1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, -1.0},
        {-1.0, 0.5, 0.0, 0.0, 0.0, 0.0, 0.5, -1.0},
        {-2.0, -1.0, -1.0, -1.0, -1.0, -1.0, -1.0, -2.0}
    };

    float white_rook[BOARD_SIZE][BOARD_SIZE] = {
        {0.0, 0.0, 0.0, 0.5, 0.5, 0.0, 0.0, 0.0},
        {-0.5, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.5},
        {-0.5, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.5},
        {-0.5, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.5},
        {-0.5, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.5},
        {-0.5, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.5},
        {0.5, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.5},
        {0.0,0.0,0.0,0.0,0.0,0.0,0.0,0.0}
    };

    float black_rook[BOARD_SIZE][BOARD_SIZE] = {
        {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
        {0.5, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.5},
        {-0.5, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.5},
        {-0.5, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.5},
        {-0.5, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.5},
        {-0.5, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.5},
        {-0.5, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, -0.5},
        {0.0, 0.0, 0.0, 0.5, 0.5, 0.0, 0.0, 0.0}
    };

    float white_queen[BOARD_SIZE][BOARD_SIZE] = {
        {-2.0,-1.0,-1.0,-0.5,-0.5,-1.0,-1.0,-2.0},
        {-1.0,0.0,0.5,0.0,0.0,0.0,0.0,-1.0},
        {-1.0,0.5,0.5,0.5,0.5,0.5,0.0,-1.0},
        {0.0,0.0,0.5,0.5,0.5,0.5,0.0,-0.5},
        {-0.5,0.0,0.5,0.5,0.5,0.5,0.0,-0.5},
        {-1.0,0.0,0.5,0.5,0.5,0.5,0.0,-1.0},
        {-1.0,0.0,0.0,0.0,0.0,0.0,0.0,-1.0},
        {-2.0,-1.0,-1.0,-0.5,-0.5,-1.0,-1.0,-2.0}
    };

    float black_queen[BOARD_SIZE][BOARD_SIZE] = {
        {-2.0,-1.0,-1.0,-0.5,-0.5,-1.0,-1.0,-2.0},
        {-1.0,0.0,0.0,0.0,0.0,0.0,0.0,-1.0},
        {-1.0,0.0,0.5,0.5,0.5,0.5,0.0,-1.0},
        {-0.5,0.0,0.5,0.5,0.5,0.5,0.0,-0.5},
        {0.0,0.0,0.5,0.5,0.5,0.5,0.0,-0.5},
        {-1.0,0.5,0.5,0.5,0.5,0.5,0.0,-1.0},
        {-1.0,0.0,0.5,0.0,0.0,0.0,0.0,-1.0},
        {-2.0,-1.0,-1.0,-0.5,-0.5,-1.0,-1.0,-2.0},
    };

    float black_king[BOARD_SIZE][BOARD_SIZE] = {
        {-3.0,-4.0,-4.0,-5.0,-5.0,-4.0,-4.0,-3.0},
        {-3.0,-4.0,-4.0,-5.0,-5.0,-4.0,-4.0,-3.0},
        {-3.0,-4.0,-4.0,-5.0,-5.0,-4.0,-4.0,-3.0},
        {-3.0,-4.0,-4.0,-5.0,-5.0,-4.0,-4.0,-3.0},
        {-2.0,-3.0,-3.0,-4.0,-4.0,-3.0,-3.0,-2.0},
        {-1.0,-2.0,-2.0,-2.0,-2.0,-2.0,-2.0,-1.0},
        {2.0,2.0,0.0,0.0,0.0,0.0,2.0,2.0},
        {2.0,3.0,1.0,0.0,0.0,1.0,3.0,2.0}
    };

    float white_king[BOARD_SIZE][BOARD_SIZE] = {
        {2.0,3.0,1.0,0.0,0.0,1.0,3.0,2.0},
        {2.0,2.0,0.0,0.0,0.0,0.0,2.0,2.0},
        {-1.0,-2.0,-2.0,-2.0,-2.0,-2.0,-2.0,-1.0},
        {-2.0,-3.0,-3.0,-4.0,-4.0,-3.0,-3.0,-2.0},
        {-3.0,-4.0,-4.0,-5.0,-5.0,-4.0,-4.0,-3.0},
        {-3.0,-4.0,-4.0,-5.0,-5.0,-4.0,-4.0,-3.0},
        {-3.0,-4.0,-4.0,-5.0,-5.0,-4.0,-4.0,-3.0},
        {-3.0,-4.0,-4.0,-5.0,-5.0,-4.0,-4.0,-3.0}
    };

    if (color == "white") {
        switch (type) {
            case PAWN:
                return white_pawn[i][j];
            case ROOK:
                return white_rook[i][j];
            case KNIGHT:
                return white_knight[i][j];
            case BISHOP:
                return white_bishop[i][j];
            case QUEEN:
                return white_queen[i][j];
            case KING:
                return white_king[i][j];
        }
    } else if (color == "black") {
        switch (type) {
            case PAWN:
                return black_pawn[i][j];
            case ROOK:
                return black_rook[i][j];
            case KNIGHT:
                return black_knight[i][j];
            case BISHOP:
                return black_bishop[i][j];
            case QUEEN:
                return black_queen[i][j];
            case KING:
                return black_king[i][j];
        }
    }

    return 0.0;
}

float eval_board(Cell **board, std::string color) {
    float score = 0.0;

    for (int i = 0; i < BOARD_SIZE; ++i) {
        for (int j = 0; j < BOARD_SIZE; ++j) {
            if (board[i][j].pieceColor == color) {
                score += get_piece_score(board[i][j].pieceType, i, j, color);
            }
        }
    }

    return score;
}

#endif